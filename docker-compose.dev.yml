#  version : Specifies the version of the Docker Compose file format.
version: "3.8"

# services: Defines the services that make up your application. 
services:

  # react-app: The name of the service.
  dev-app:

    restart: unless-stopped

    container_name: app-dev-container

    #  image: Specifies the image name. Docker Compose will build the image from the Dockerfile if it doesnâ€™t already exist.
    image: app-dev-image

    #  build: Defines the build context and Dockerfile for the service.
    build:
      # we set the build context to the current folder . of the host machine
      context: .

      dockerfile: Dockerfile.dev

    stdin_open: true

    #  we map the port so that we can access our react app running on port 3000 inside the container from outside i.e host machine.
    ports:
      - "3000:3000"

    # The volume maps everything in the host machine to the app folder inside the container.
    volumes:
      - ./src:/app/src
    # volumes:
    #   - /app/node_modules
    #   - .:/app

    environment:
      # - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true

  test:
    container_name: app-test-container

    image: app-test-image

    build:
      context: .
      dockerfile: Dockerfile.dev

    volumes:
      - .:/app

    environment:
      - CI=true

    command: [ "npm", "test" ]

# Steps :  Let's start our React app for development!
# 1. If you want to run entire services then Use below Command : 
# a. docker-compose -f docker-compose.dev.yml up

# 2. If you want to Run Single Service at a Time then Run below Command : For example i want to run test service.
# a. docker-compose -f docker-compose.dev.yml up test

# 3. If you want to run only dev-app service only the use below Command :
# a. docker-compose -f docker-compose.dev.yml up dev-app


#  NOTE : on a Windows machine:  -e CHOKIDAR_USEPOLLING=true, it was updating the code inside the container but the changes were not displaying on the browser, use -e WATCHPACK_POLLING=true instead.


#  NOTE: if you are using same docker-compose.yml file for both dev and production environment, then you need to run development environment with docker-compose up dev-app.
#  if you run docker-compose up then it will by default run all the containers defined inside docker-compose file.